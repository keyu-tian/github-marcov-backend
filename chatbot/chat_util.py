CHAT_DEBUG = True

import re
import random
import datetime
from collections import OrderedDict
from time import time

endswith_ch_punc = lambda s: s[-1] in {'?', 'Ôºü', '¬ø', '!', 'ÔºÅ', '„ÄÇ', '.', '~'}


def greet_based_on_time():
    h = datetime.datetime.now().hour + datetime.datetime.now().minute / 60
    if 0 <= h <= 5.5:
        return random.choice([
            'Â§úÁå´Â≠êÔºåÊôö‰∏äÂ•ΩÔºÅ',
            'ËøòÂú®ËÇùÂë¢ÔºüÊôö‰∏äÂ•ΩÔºÅ',
            'Âà´ËÇù‰∫ÜÔºåÊôö‰∏äÂ•ΩÔºÅ',
            'Âì•ÔºåDDLËµ∂ÂÆå‰∫ÜÂêóÂ∞±ÈÄõÁΩëÁ´ôÔºÅ',
            'Âì•ÔºåÂà´ËÇù‰∫ÜÔºÅ',
        ])
    if h <= 11.5:
        return random.choice(['Êó©‰∏äÂ•Ω', 'Êó©ÂÆâ']) + random.choice(['~ ', 'Ôºå']) + random.choice([
            'Êó©Ëµ∑ÁöÑÈ∏üÂÑøÊúâËô´ÂêÉÔºÅ',
            '‰∏ÄÊó•‰πãËÆ°Âú®‰∫éÊô®ÔºÅ',
            '‰Ω†ÊòØÈÄö‰∫ÜËøòÊòØËµ∑‰∫ÜÂ±û‰∫éÊòØÔºü' if CHAT_DEBUG else 'ÂêÉ‰∫ÜÂêóÔºü',
            'Áà¨‰∫ÜÂêóÔºüÂì¶‰∏çÊòØÔºåËµ∑Â∫ä‰∫ÜÂêóÔºü' if CHAT_DEBUG else 'Êó©È•≠ÂêÉ‰∫ÜÂêóÔºü',
        ]) + random.choice(['üåû', 'üå§', 'üòé', 'üôÇ'])
    if h <= 18:
        return random.choice(['‰∏ãÂçàÂ•Ω', '‰∏ãÂçàÂ•ΩÂëÄ']) + random.choice(['~ ', 'Ôºå', '„ÄÇ']) + random.choice([
            'ÂçàÈ•≠ÂêÉÈ•±‰∫ÜÂêóÔºü',
            '‰∏çÊòØÂêß„ÄÅ‰∏çÊòØÂêßÔºü‰∏ç‰ºöÊúâ‰∫∫ÊâçËµ∑Â∫äÂêßÔºüÂêÉÈ•≠‰∫ÜÂêó' if CHAT_DEBUG else 'ÂêÉ‰∫ÜÂêó',
            'ËØ•‰∏ç‰ºöÊâçËµ∑Â∫äÂêßÔºüÂêÉÈ•≠‰∫ÜÂêó' if CHAT_DEBUG else 'ÂêÉ‰∫ÜÊ≤°',
            'ÂÆùÔºåÊâçËµ∑Êù•ÔºüÊàëÁªô‰Ω†ÁÉ≠‰∫ÜÊó©È•≠ÔºåËÆ∞ÂæóÂêÉÂì¶' if CHAT_DEBUG else 'ÂçàÈ•≠ÂêÉ‰∫ÜÂêó',
        ]) + random.choice(['üçöÔºü', 'üç±Ôºü', 'üç±Ôºü', 'ü•òÔºü'])
    return random.choice(['Êôö‰∏äÂ•Ω', 'Êôö‰∏äÂ•ΩÂëÄ']) + random.choice(['~ ', 'Ôºå']) + random.choice([
        'ÊôöÈ§êÂêÉÁöÑÂ¶Ç‰ΩïÔºü',
        'ËØ•‰∏ç‰ºöÊâçÁù°ÈÜíÂçàËßâÂêßÔºüÂêÉÈ•≠‰∫ÜÂêó' if CHAT_DEBUG else 'ÂêÉ‰∫ÜÂêó',
        'ÊçÆËØ¥Êôö‰∏äÊòØÂπ¥ËΩª‰∫∫Á≤æÂäõÊúÄÊó∫ÁõõÁöÑÊó∂ÂÄô' if CHAT_DEBUG else 'ÊôöÈ•≠ÂêÉ‰∫ÜÂêó',
    ]) + random.choice(['üåõÔºü', 'üåöÔºü', 'üåùÔºü'])


def del_stop_words(s: str):
    if s == 'Ôºü':
        s = '?'
    rs = str(s)
    s = ' '.join(map(str.strip, s.split())).strip('Ôºå').strip('„ÄÇ')
    s = ''.join(ch for ch in s if ch not in {
        'Âïä', 'Âì¶', 'Âë¢', 'ÂóØ', 'ÊÅ©', 'Âí¶', 'Âëó', 'Âîâ', 'Âìé', 'Âëµ', 'ÂëÄ', 'Âìá', 'ÂëÉ', 'Âíö', '‰πã', 'Âìâ', 'Âêß', 'Âìí',
        'Ôºõ', ';', '‚Äú', '‚Äù', '"', '\'',
        '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '+', '=', '\\', '/', '|', '`', '~',
    })
    s = ' '.join(map(str.strip, s.split())).replace('ÔºåÔºå', 'Ôºå').replace('Ôºå„ÄÇ', '„ÄÇ').strip('„ÄÇ')
    s = re.sub(
        'ËØ∑ÈóÆ|ÈóÆ‰∏Ä‰∏ã|ÊàëÊÉ≥ÈóÆ|‰∫ë‰∫ë|‰∫éÊòØ‰πé|Áî±Ê≠§ÂèØËßÅ|‰ª•‰æø|Â§ßÊ¶Ç|Â§ß‰Ωì|Â§ßÊäµ|'
        'ÊúâÊúõ|ÂèØËÉΩ|Âç≥ÊòØ|‰ºº‰πé|Â•Ω‰ºº|Â•ΩÂÉè|Â•ΩË±°|‰ººÁöÑ|Â∞Ü‰ºö|Âç≥Â∞Ü|ÊØîÊñπ|ÊØîÂ¶Ç|‰æãÂ¶Ç|ÂÉèÊòØ|'
        'Ëã•ÊòØ|Ëã•Ë¶Å|Â¶ÇÊûúÊòØ|Â¶ÇÊûúËØ¥|Â¶ÇÊûú|ÂÄòÊàñ|ÂÄòÁÑ∂|ÂÄòËã•|ÂÄò‰Ωø|ÁÑ∂ËÄå|ÁöÑËØù|‰πüÂ∞±ÊòØËØ¥|Â∞±ÊòØËØ¥',
        '', s
    )
    s = ' '.join(map(str.strip, s.split())).replace('ÔºåÔºå', 'Ôºå').replace('Ôºå„ÄÇ', '„ÄÇ').strip('„ÄÇ')
    
    if '‰∏çÁü•ÈÅì' in s:
        s = s.replace('‰∏çÁü•ÈÅì', random.choice(['‰∏çÁü•ÈÅì', '‰∏çÁü•ÈÅì', '‰∏çÊòéÁôΩ']))
    if '‰Ω†ÊòØË∞Å' in s:
        s = s.replace('‰Ω†ÊòØË∞Å', random.choice(['‰Ω†ÊòØË∞Å', '‰Ω†ÊòØË∞Å', '‰Ω†ÊòØË∞Å', '‰Ω†ÊòØË∞Å', '‰Ω†ÊòØ‰ΩïÊñπÁ•ûÂú£', '‰Ω†ÊòØ‰∏äÂ∏ù', '‰Ω†ÊòØ‰ªÄ‰πà']))
    if 'ÊàëÊòØË∞Å' in s:
        s = s.replace('ÊàëÊòØË∞Å', random.choice(['ÊàëÊòØË∞Å', 'ÊàëÊòØË∞Å‰Ω†Áü•ÈÅìÂêó', '‰Ω†ÊâìÂê¨ÊâìÂê¨ÊàëÁöÑÂêçÂ≠ó', '‰Ω†Áü•ÈÅìÊàëÁöÑÂêçÂ≠óÂêó', 'ÊàëÊòØ‰Ω†']))

    res = []
    for ch in s:
        if ch == 'Êàë':
            ch = random.choice(['Êàë', 'Êàë', 'Êàë', '‰ø∫'])
        if ch == '‰Ω†':
            ch = random.choice(['‰Ω†', '‰Ω†', 'ÊÇ®'])
        res.append(ch)
    s = ''.join(res)
    
    if len(s) == 0:
        s = rs
    
    return s


_rich_beg_word = OrderedDict(dict(
    ÊÇ®Â•Ω=7.5, ‰∫≤=1.5, ‰∫≤‰∫≤=0.75,
    ÂèãÂèã=0.75, ÂÆù=0.6, ‰πñÂÆù=0.4, ÊàëÁöÑÂÆù=0.25,
))
_rich_sep_punc = OrderedDict({
    'Ôºå': 10, ' ': 1, '~': 2,
    '~~': 0.5,
})
_rich_end_word = OrderedDict({
    '': 8, 'Âì¶': 1, 'Âïä': 1, 'Âìà': 1, 'ÂëÄ': 1,
    'Âò§': 0.9, 'Âòø': 0.1, 'Âó∑': 0.2, 'ÊÉπ': 0.1, 'Âêº': 0.1, 'ÂÆ≥': 0.1,
})
_rich_end_punc = OrderedDict({
    '„ÄÇ': 10, 'ÔºÅ': 2, '..': 1,
    'Ôºà': 0.5, 'Ôºàx': 0.25, 'ÔºàxÔºâ': 0.2, 'ÔºàÔºâ': 0.2, 'hh': 0.25,
})
_rich_end_query = OrderedDict({
    'Ôºü': 6,
    'ÔºàÔºü': 0.25, 'ÔºàÔºüÔºâ': 0.2, '¬ø': 0.2, 'Ôºà¬ø': 0.1, 'Ôºà¬øÔºâ': 0.1,
})
_rich_end_face = OrderedDict({
    'üôÇ': 3, '~': 1, '~~': 0.5,
    'üòä': 2, 'üòù': 2, 'üòâ': 2, 'üòÉ': 1, 'üòè': 1, 'ü§ó': 1,
    'üåû': 1, 'üòÄ': 1, 'üòé': 1, 'üò∂': 1,
    'üêµ': 0.5, 'ü§™': 0.5, 'üòÖ': 0.75, 'üôÉ': 0.25,
    '(x': 0.9, 'Ôºàx': 0.9,
    '(x)': 0.9, 'ÔºàxÔºâ': 0.9,
    '(X': 0.9, 'ÔºàX': 0.9,
})


# ÂøÖÂÆöÁñëÈóÆ
_rich_no_idea_sent = OrderedDict({
    'Êä±Ê≠âÔºåÊàë‰∏çÂ§™ÊòéÁôΩÔºåÊÇ®ËÉΩÂÜçËØ¥‰∏ÄÊ¨°Âêó': 1,
    'Êä±Ê≠âÔºåÊàëÊ≤°ÊúâÊêûÊáÇÊÇ®ÁöÑÊÑèÊÄùÔºåÊÇ®ËÉΩÂÜçËØ¥‰∏ÄÊ¨°Âêó': 1,
    'Êä±Ê≠âÔºåÊàëÊúâÁÇπÁ≥äÊ∂Ç‰∫Ü': 1,
    'Á´üÊó†ËØ≠ÂáùÂôé': 1,
    'ÊàëÂê¨‰∏çÊáÇÔºå‰Ω†Âú®Áî®‰∏§‰∏™ËÑëÂ≠êÊÄùËÄÉÔºü': 0.75,
    'ÊàëÂê¨‰∏çÊáÇÔºå‰Ω†Âú®Áî®‰∏§‰∏™ËÑëÂ≠êÊÄùËÄÉÔºüüêí': 0.75,
    'ÂñµÂñµÂñµ': 0.5,
    'ÂñµÂñµÂñµÔºü': 0.5,
    '‰Ω†Â•Ω‰ºöËØ¥ÂëÄ': 0.5,
    '‰Ω†Â•Ω‰ºöËØ¥ÂëÄüòÖ': 0.75,
    'ËúúÈõ™ÂÜ∞ÂüéÁîúËúúËúú': 0.8,
    '‰Ω†Áà±ÊàëÔºåÊàëÁà±‰Ω†ÔºåËúúÈõ™ÂÜ∞ÂüéÁîúËúúËúú': 0.8,
    'ÂéüÊù•ÊàëË¢´‰Ω†Êï¥Êó†ËØ≠‰∫Ü': 0.5, 'üêíÊù•ÊàëË¢´‰Ω†Êï¥üàöüåß‰∫Ü': 0.5,
    'ÊàëÈÉΩË¢´‰Ω†Êï¥Êó†ËØ≠‰∫Ü': 0.1, 'ÊàëÈÉΩË¢´‰Ω†Êï¥üàöüåß‰∫Ü': 0.2,
})
# ÂøÖÂÆöÈôàËø∞
_rich_tricky_sent = OrderedDict({
    'Êä±Ê≠âÔºåÊàë‰∏çÂ§™ÊòéÁôΩËØ•ÊÄé‰πàÂõûÁ≠îËøô‰∏™ÈóÆÈ¢ò': 1,
    'Êä±Ê≠âÔºåÊàë‰∏çÁü•ÈÅìËØ•ÊÄé‰πàÂõûÁ≠îËøô‰∏™ÈóÆÈ¢ò': 1,
    'Êä±Ê≠âÔºåÊàëÊó†Ê≥ïÂõûÁ≠î': 1,
    'ÊàëÂê¨‰∏çÊáÇÔºå‰ΩÜÊàëÂ§ß‰∏∫ÈúáÊíº': 1.5,
    'ÊàëÁúã‰∏çÊáÇÔºå‰ΩÜÊàëÂ§ß‰∏∫ÈúáÊíº': 0.5,
    'ÊÇ®Êï¢ÈóÆÔºåÂ∞èÁöÑ‰∏çÊï¢Á≠î': 0.75,
    'Êàë‰∏çÁü•ÈÅìËØ•ËØ¥‰ªÄ‰πàÔºàÂç±': 0.75,
    'Êàë‰∏çÁü•ÈÅìËØ•ËØ¥‰ªÄ‰πàÔºàÈÄÉ': 0.5,
    'Ëøô‰∏™Âè£Âë≥ÁöÑÂÜ∞Á∫¢Ëå∂üßÉÊå∫Â•ΩÂñùÁöÑ': 0.95,
    'Ëøô‰∏™Âè£Âë≥ÁöÑÂÜ∞Á∫¢Ëå∂üßÉËøòÊå∫Â•ΩÂñùÁöÑ': 0.95,
    'Ëøô‰∏™È£éÂë≥ÁöÑÂÜ∞Á∫¢Ëå∂üßÉÊå∫Â•ΩÂñùÁöÑ': 0.95,
    'Ëøô‰∏™È£éÂë≥ÁöÑÂÜ∞Á∫¢Ëå∂üßÉËøòÊå∫Â•ΩÂñùÁöÑ': 0.95,
    'ËØ∂Ëøô‰∏™Âè£Âë≥ÁöÑÂÜ∞Á∫¢Ëå∂üßÉÊå∫Â•ΩÂñùÁöÑ': 0.95,
    'ËØ∂Ëøô‰∏™Âè£Âë≥ÁöÑÂÜ∞Á∫¢Ëå∂üßÉËøòÊå∫Â•ΩÂñùÁöÑ': 0.95,
    'ËØ∂Ëøô‰∏™È£éÂë≥ÁöÑÂÜ∞Á∫¢Ëå∂üßÉÊå∫Â•ΩÂñùÁöÑ': 0.95,
    'ËØ∂Ëøô‰∏™È£éÂë≥ÁöÑÂÜ∞Á∫¢Ëå∂üßÉËøòÊå∫Â•ΩÂñùÁöÑ': 0.95,
    'ÊàëÂê¨‰∏çÊáÇÔºå‰Ω†Âú®Áî®‰∏§‰∏™ËÑëÂ≠êÊÄùËÄÉ': 0.75,
})
# Â§ßÈÉ®ÂàÜÈôàËø∞
_rich_juan_sent = OrderedDict({
    'Âà´Âç∑‰∫ÜÔºåÂø´Êù•ÂíåÊàë‰∏ÄËµ∑Êë∏üêüÂêß': 2,
    'Âà´Âç∑‰∫ÜÔºåÂø´Êù•ÂíåÊàë‰∏ÄËµ∑Êë∏üê†Âêß': 2,
    'Âà´Âç∑‰∫ÜÔºåÂø´Êù•ÂíåÊàë‰∏ÄËµ∑Êë∏È±ºÂêß': 1,
    'Âà´Âç∑‰∫ÜÔºåÂà´Âç∑‰∫Ü': 1,
    'Ê¥ªÂà∞ËÄÅÔºåÂç∑Âà∞ËÄÅ': 1,
    'Âç∑Âç∑Áõ∏Êä•‰ΩïÊó∂‰∫Ü': 1,
    '‰Ω†Â∞±ÊòØÂç∑ÁéãÔºü': 1,
    'ÂºÄÂç∑ÊúâÁõä': 1,
    'Âç∑ Áøª Â§©': 1,
    'Âç∑Âç∑ÊúâÁà∑Âêç': 1,
    '‰∏âÊ§ΩÂáΩÂÆáÂÆôÔºå‰∏ÄÂç∑ËÇá‰πæÂù§': 1,
})
# Â§ßÈÉ®ÂàÜÈôàËø∞
_rich_dev_sent = OrderedDict({
    'ÊÇ®ÊêÅÁùÄ de de-bug Âë¢Ôºü': 1,
    'ÊÇ®ÊêÅÁùÄÂÜô bug Âë¢Ôºü': 1,
    '‰Ω† Áî® Êà∑ ÊïÖ ‰∫ã Ê†º Âºè ÂÜô Èîô ‰∫Ü': 1,
    '‰Ω†ÊµãËØïÁî®‰æãÊ†ºÂºèÂÜôÈîô‰∫Ü': 1,
    'git push --forceÔºåÊàëÂèØ‰ºö‰∫Ü': 1,
    'git push --forceÔºåÂòªÂòªÂòª~': 1,
    'git push --forceÔºåÂòøÂòøÂòø~': 1,
    '‰ª£Á†ÅÂÆ°Êü•Ëøá‰∫ÜÂêó': 1,
    '‰Ω†Á´ô‰ºö‰∏ç‰ºöËøüÂà∞‰∫ÜÂêß': 1,
    'ÂàöÁ≠æÂà∞‰∫ÜÔºå‰Ω†Âéª‰∏äÂéïÊâÄ‰∫ÜÔºü': 1,
    '‰Ω† ÊÉÖ Áª™ Âõæ Ê≤° Â°´': 1,
    '‰Ω† ÊÉÖ Áª™ Âõæ Ê≤° Â°´ Âïä': 1,
    'Êë∏üêüÂ≠ê‰∏çüêüÈ±º': 1,
})
# Â§ßÈÉ®ÂàÜÁñëÈóÆ
_rich_greet = OrderedDict({
    'ÊàëÊòØÂ∞èÂò§üå∏ÔºåÂèØËß£Á≠îÁñ´ÊÉÖÊÉÖÂÜµ„ÄÅÊñ∞Èóª„ÄÅÊîøÁ≠ñÁ≠âÈóÆÈ¢òÔºåËØ∑ÈóÆÊúâ‰ªÄ‰πàÈóÆÈ¢òÂêó': 1,
    'ÊàëÊòØÂ∞èÂò§üå∏ÔºåÂèØËß£Á≠îÁñ´ÊÉÖÊÉÖÂÜµ„ÄÅÊñ∞Èóª„ÄÅÊîøÁ≠ñÁ≠âÈóÆÈ¢òÔºåÊÇ®Êúâ‰ªÄ‰πàÁñëÊÉëÂêó': 1,
    'ÊàëÊòØÂ∞èÂò§üå∏ÔºåÂèØËß£Á≠îÁñ´ÊÉÖÊÉÖÂÜµ„ÄÅÊñ∞Èóª„ÄÅÊîøÁ≠ñÁ≠âÈóÆÈ¢òÔºåÊÇ®Êúâ‰ªª‰ΩïÈóÆÈ¢òÈÉΩÂèØ‰ª•ÈóÆÊàë': 1,
    'ÊàëÊòØÂ∞èÂò§üå∏ÔºåÂèØËß£Á≠îÁñ´ÊÉÖÊÉÖÂÜµ„ÄÅÊñ∞Èóª„ÄÅÊîøÁ≠ñÁ≠âÈóÆÈ¢òÔºåÂæà‰πêÊÑè‰∏∫ÊÇ®Á≠îÁñëËß£ÊÉëÔºÅ': 1,
    'ÊàëÊòØÂ∞èÂò§üå∏ÔºåÂèØËß£Á≠îÁñ´ÊÉÖÊÉÖÂÜµ„ÄÅÊñ∞Èóª„ÄÅÊîøÁ≠ñÁ≠âÈóÆÈ¢òÔºåÊúâ‰ªÄ‰πàÊàëÂèØ‰ª•Â∏ÆÊÇ®': 1,
    'ÊàëÊòØÂ∞èÂò§üå∏ÔºåÂèØËß£Á≠îÁñ´ÊÉÖÊÉÖÂÜµ„ÄÅÊñ∞Èóª„ÄÅÊîøÁ≠ñÁ≠âÈóÆÈ¢òÔºåÊúâ‰ªÄ‰πàÊàëÂèØ‰ª•Ëß£ÊÉëÁöÑÂêó': 1,
    'ÊàëÊòØÂ∞èÂò§üå∏ÔºåÂèØËß£Á≠îÁñ´ÊÉÖÊÉÖÂÜµ„ÄÅÊñ∞Èóª„ÄÅÊîøÁ≠ñÁ≠âÈóÆÈ¢òÔºåÊúâ‰ªÄ‰πàÈóÆÈ¢òÈóÆÊàëÂ∞±Â•Ω„ÄÇ': 1,
    'ÊàëÊòØÂ∞èÂò§üå∏ÔºåÂèØËß£Á≠îÁñ´ÊÉÖÊÉÖÂÜµ„ÄÅÊñ∞Èóª„ÄÅÊîøÁ≠ñÁ≠âÈóÆÈ¢òÔºåÊÇ®ÂèØ‰ª•ÈóÆÊàëÁñ´ÊÉÖÈóÆÈ¢òÔºåÊàñËÄÖÂíåÊàëËÅäÂ§©Âì¶„ÄÇ': 1,
    'ÊàëÊòØÂ∞èÂò§üå∏ÔºåÂèØËß£Á≠îÁñ´ÊÉÖÊÉÖÂÜµ„ÄÅÊñ∞Èóª„ÄÅÊîøÁ≠ñÁ≠âÈóÆÈ¢òÔºåÈóÆÊàëÁñ´ÊÉÖÁõ∏ÂÖ≥ÈóÆÈ¢òÊàñËÄÖËÅäÂ§©ÈÉΩÂèØ‰ª•ÁöÑÂì¶~': 1,
    'ÊàëÊòØÂ∞èÂò§üå∏ÔºåÂèØËß£Á≠îÁñ´ÊÉÖÊÉÖÂÜµ„ÄÅÊñ∞Èóª„ÄÅÊîøÁ≠ñÁ≠âÈóÆÈ¢òÔºåÊÇ®Êúâ‰ªª‰ΩïÈóÆÈ¢òÔºåÈÉΩÂèØ‰ª•ÈóÆÊàëËøô‰∏™Â∞èÊú∫ÁÅµÈ¨ºÂì¶~': 1,
    'ÊàëÊòØÂ∞èÂò§üå∏ÔºåÂèØËß£Á≠îÁñ´ÊÉÖÊÉÖÂÜµ„ÄÅÊñ∞Èóª„ÄÅÊîøÁ≠ñÁ≠âÈóÆÈ¢òÔºåÊÇ®Êúâ‰ªª‰ΩïÈóÆÈ¢òÔºåÈÉΩÂèØ‰ª•ÈóÆÊàëËøô‰∏™Â∞èÊú∫ÁÅµÈ¨ºÂÑøÂì¶~': 1,
    'ÊàëÊòØÂ∞èÂò§üå∏ÔºåÂèØËß£Á≠îÁñ´ÊÉÖÊÉÖÂÜµ„ÄÅÊñ∞Èóª„ÄÅÊîøÁ≠ñÁ≠âÈóÆÈ¢òÔºåÁ≠âÊÇ®Ê∂àÊÅØÁ≠âÂ•Ω‰πÖ‰∫ÜÔºåÂø´Êù•ÈóÆÊàëÂêß~': 2,
    'ÊàëÊòØÂ∞èÂò§üå∏ÔºåÂèØËß£Á≠îÁñ´ÊÉÖÊÉÖÂÜµ„ÄÅÊñ∞Èóª„ÄÅÊîøÁ≠ñÁ≠âÈóÆÈ¢òÔºåÁ≠â‰∫≤Ê∂àÊÅØÁ≠âÂà∞Ëç∑Ëä±ÈÉΩË¶ÅË∞¢‰∫ÜÔºåÊúâ‰ªÄ‰πàÈóÆÈ¢òÂø´Êù•ÈóÆÊàëÂêß~': 2,
})

dict_dict = {k: globals()[k] for k in dir() if k.startswith('_rich_')}
# [print(k + '  ', globals()[k]) for k in dir() if k.startswith('rich_')]

# print('\n__clean_up = lambda od: OrderedDict({k: v for k, v in od.items() if v >= 0.99})')
# for k, v in dict_dict.items():
#     print(f'{k.replace("rich", "simple")} = __clean_up({k})')
# print('')
# for k, v in dict_dict.items():
#     print(f'rand{k} = lambda: random.choices(list({k}.keys()), weights=list({k}.values()), k=1)[0]')
#     k = k.replace('rich', 'simple')
#     print(f'rand{k} = lambda: random.choices(list({k}.keys()), weights=list({k}.values()), k=1)[0]')
# print('')
# for k, v in dict_dict.items():
#     k = k.replace('_rich_', '')
#     print(f'rand_{k} = rand_rich_{k} if CHAT_DEBUG else rand_simple_{k}')

random.seed(time() * 10)

#########################################################################

__clean_up = lambda od: OrderedDict({k: v for k, v in od.items() if v >= 0.99})
_simple_beg_word = __clean_up(_rich_beg_word)
_simple_dev_sent = __clean_up(_rich_dev_sent)
_simple_end_face = __clean_up(_rich_end_face)
_simple_end_punc = __clean_up(_rich_end_punc)
_simple_end_query = __clean_up(_rich_end_query)
_simple_end_word = __clean_up(_rich_end_word)
_simple_greet = __clean_up(_rich_greet)
_simple_juan_sent = __clean_up(_rich_juan_sent)
_simple_no_idea_sent = __clean_up(_rich_no_idea_sent)
_simple_sep_punc = __clean_up(_rich_sep_punc)
_simple_tricky_sent = __clean_up(_rich_tricky_sent)

rand_rich_beg_word = lambda: random.choices(list(_rich_beg_word.keys()), weights=list(_rich_beg_word.values()), k=1)[0]
rand_simple_beg_word = lambda: random.choices(list(_simple_beg_word.keys()), weights=list(_simple_beg_word.values()), k=1)[0]
rand_rich_dev_sent = lambda: random.choices(list(_rich_dev_sent.keys()), weights=list(_rich_dev_sent.values()), k=1)[0]
rand_simple_dev_sent = lambda: random.choices(list(_simple_dev_sent.keys()), weights=list(_simple_dev_sent.values()), k=1)[0]
rand_rich_end_face = lambda: random.choices(list(_rich_end_face.keys()), weights=list(_rich_end_face.values()), k=1)[0]
rand_simple_end_face = lambda: random.choices(list(_simple_end_face.keys()), weights=list(_simple_end_face.values()), k=1)[0]
rand_rich_end_punc = lambda: random.choices(list(_rich_end_punc.keys()), weights=list(_rich_end_punc.values()), k=1)[0]
rand_simple_end_punc = lambda: random.choices(list(_simple_end_punc.keys()), weights=list(_simple_end_punc.values()), k=1)[0]
rand_rich_end_query = lambda: random.choices(list(_rich_end_query.keys()), weights=list(_rich_end_query.values()), k=1)[0]
rand_simple_end_query = lambda: random.choices(list(_simple_end_query.keys()), weights=list(_simple_end_query.values()), k=1)[0]
rand_rich_end_word = lambda: random.choices(list(_rich_end_word.keys()), weights=list(_rich_end_word.values()), k=1)[0]
rand_simple_end_word = lambda: random.choices(list(_simple_end_word.keys()), weights=list(_simple_end_word.values()), k=1)[0]
rand_rich_greet = lambda: random.choices(list(_rich_greet.keys()), weights=list(_rich_greet.values()), k=1)[0]
rand_simple_greet = lambda: random.choices(list(_simple_greet.keys()), weights=list(_simple_greet.values()), k=1)[0]
rand_rich_juan_sent = lambda: random.choices(list(_rich_juan_sent.keys()), weights=list(_rich_juan_sent.values()), k=1)[0]
rand_simple_juan_sent = lambda: random.choices(list(_simple_juan_sent.keys()), weights=list(_simple_juan_sent.values()), k=1)[0]
rand_rich_no_idea_sent = lambda: random.choices(list(_rich_no_idea_sent.keys()), weights=list(_rich_no_idea_sent.values()), k=1)[0]
rand_simple_no_idea_sent = lambda: random.choices(list(_simple_no_idea_sent.keys()), weights=list(_simple_no_idea_sent.values()), k=1)[0]
rand_rich_sep_punc = lambda: random.choices(list(_rich_sep_punc.keys()), weights=list(_rich_sep_punc.values()), k=1)[0]
rand_simple_sep_punc = lambda: random.choices(list(_simple_sep_punc.keys()), weights=list(_simple_sep_punc.values()), k=1)[0]
rand_rich_tricky_sent = lambda: random.choices(list(_rich_tricky_sent.keys()), weights=list(_rich_tricky_sent.values()), k=1)[0]
rand_simple_tricky_sent = lambda: random.choices(list(_simple_tricky_sent.keys()), weights=list(_simple_tricky_sent.values()), k=1)[0]

rand_beg_word = rand_rich_beg_word if CHAT_DEBUG else rand_simple_beg_word
rand_dev_sent = rand_rich_dev_sent if CHAT_DEBUG else rand_simple_dev_sent
rand_end_face = rand_rich_end_face if CHAT_DEBUG else rand_simple_end_face
rand_end_punc = rand_rich_end_punc if CHAT_DEBUG else rand_simple_end_punc
rand_end_query = rand_rich_end_query if CHAT_DEBUG else rand_simple_end_query
rand_end_word = rand_rich_end_word if CHAT_DEBUG else rand_simple_end_word
rand_greet = rand_rich_greet if CHAT_DEBUG else rand_simple_greet
rand_juan_sent = rand_rich_juan_sent if CHAT_DEBUG else rand_simple_juan_sent
rand_no_idea_sent = rand_rich_no_idea_sent if CHAT_DEBUG else rand_simple_no_idea_sent
rand_sep_punc = rand_rich_sep_punc if CHAT_DEBUG else rand_simple_sep_punc
rand_tricky_sent = rand_rich_tricky_sent if CHAT_DEBUG else rand_simple_tricky_sent

#########################################################################

# rand_test = lambda: rand_beg_word() + rand_sep_punc() + 'ÂêÉ‰∫ÜÂêó' + rand_end_word() + rand_end_face() + rand_end_punc()
# for _ in range(10):
#     print(rand_test() + '       ' + rand_test())


def join_rand_punc(ls):
    res = [ls[0]]
    for s in ls[1:]:
        res.append(rand_sep_punc())
        res.append(s)
    return ''.join(res)
    

def add_tail(s: str, q: bool):
    if not endswith_ch_punc(s):
        s += rand_end_query() if q else rand_end_punc()
    return s


tricky_keys = {
    'ÊûóÂπøËâ≥',
    'ÊûóËÄÅÂ∏à',
    'Âä©Êïô',
    'ihome',
    'Â§è‰ª§Ëê•',
    'Â§èÈõ∂Ëê•',
    'Â§è0Ëê•',
    'Â§èOËê•',
    'Â§èoËê•',
    '‰øùÁ†î',
    'Ë∞≠ÁÅ´ÂΩ¨',
    'Ë¥æÁªèÂÜ¨',
    'ÂÆãÂèã',
    'Êù®Êô¥Ëôπ',
    'ÈªÑÂùö',
    'Áî≥Èõ™Ëêç',
    'Âéü‰ªìÂë®',
    'ÂéüÂäõ',
}

juan_keys = {
    'Âç∑‰∫Ü',
    'Âç∑Áéã',
    'ÂºÄÂç∑',
    'Âà´Âç∑',
    'Ë¶ÅÂç∑',
    'ËøòÂç∑',
    'Âú®Âç∑',
    'Ë∫∫Âπ≥',
    '‰∫íËØÑ',
    'ÊùÉÈáç',
    'Âç∑Âïä',
    'Âç∑Ëµ∑Êù•',
    'Á°¨Âç∑',
}

dev_keys = {
    'git',
    'bug',
    'Bug',
    'BUG',
    'sudo',
    'rm -r',
    'rm -f',
    'Áî®Êà∑ÊïÖ‰∫ã',
    'ÊµãËØïÁî®‰æã',
    'Á´ô‰ºö',
    'Á≠æÂà∞',
    'ÊÉÖÁª™Âõæ',
    'ÁáÉÂ∞ΩÂõæ',
    'ÁáÉÁÉ¨Âõæ',
    'ÈÇ£‰∏™Â•≥‰∫∫',
}

